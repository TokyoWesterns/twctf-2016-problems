import sys

class bitstring:
    def __init__(self, s):
        self.bits = ""
        for c in s:
            self.bits += "{0:08b}".format(ord(c))[::-1]
        self.pos = 0
    
    def peek(self, n):
        return self.bits[self.pos:self.pos+n]

    def get(self, n):
        self.pos += n
        sys.stderr.write("{}\n".format(self.bits[self.pos-n:self.pos]))
        return self.bits[self.pos-n:self.pos]

def extract_code(bits):
    if int(bits.peek(7), 2) < 0b0011000:
        return int(bits.get(7), 2) + 256
    elif int(bits.peek(8), 2) < 0b11000000:
        return int(bits.get(8), 2) - 0b00110000
    elif int(bits.peek(8), 2) < 0b11001000:
        return int(bits.get(8), 2) - 0b11000000 + 280
    else:
        return int(bits.get(9), 2) - 0b110010000 + 144

lbase = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]
lext = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
def code2length(code):
    assert(257 <= code <= 285)
    return lbase[code - 257], lext[code - 257]

dbase = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
         8193, 12289, 16385, 24577]
dext = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
        7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
def code2dist(code):
    assert(0 <= code <= 29)
    return dbase[code], dext[code]

def inflate(bits):
    bits.get(16)

    plain = ""
    bfinal = False

    while not bfinal:
        bfinal = bits.get(1) == "1"
        btype = bits.get(2)
        if btype == "00":
            bits.get(5)
            length = int(bits.get(16)[::-1], 2)
            nlength = int(bits.get(16)[::-1], 2)
            for i in xrange(length):
                plain += chr(int(bits.get(8)[::-1], 2))
        elif btype == "10": # fixed
            while True:
                code = extract_code(bits)
                sys.stderr.write("  {}\n".format(code))
                if code < 256:
                    plain += chr(code)
                elif code == 256:
                    # End of Block
                    break
                else:
                    length, extra = code2length(code)
                    if extra:
                        length += int(bits.get(extra)[::-1], 2)
                    dist, extra = code2dist(int(bits.get(5), 2))
                    if extra:
                        dist += int(bits.get(extra)[::-1], 2)
                    for i in xrange(length):
                        plain += plain[-dist]
        elif btype == "01": # dynamic
            print "Not supported"
            exit(1)
        else:
            print "Unknown btype"
            exit(1)
    return plain

bits = bitstring(sys.stdin.read())
plain = inflate(bits)
sys.stdout.write(plain)
